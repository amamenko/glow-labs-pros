import express, { Request, Response } from "express";
import { GoogleSpreadsheet } from "google-spreadsheet";
import cors from "cors";
import enforce from "express-sslify";
import path from "path";
import "dotenv/config";

const app = express();

const PORT = process.env.PORT || 4000;

// Enable all cross-origin requests
app.use(cors());

// Populates JSON body on requests
app.use(express.json());

if (process.env.NODE_ENV === "production") {
  app.use(enforce.HTTPS({ trustProtoHeader: true }));
}

const doc = new GoogleSpreadsheet(process.env.ALLERGIES_SPREADSHEET_ID);
app.get("/allergies/:ingredient?", async (req: Request, res: Response) => {
  const ingredient = req.params?.ingredient;
  if (!ingredient) {
    res.status(400).send("Ingredient is a required parameter!");
    return false;
  }
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_CLIENT_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n"),
  });
  await doc.loadInfo();
  const sheet = doc.sheetsByIndex[0];
  const rows = await sheet.getRows();
  const prodsArr = rows.map((row) => {
    return {
      productLine: row["Product Line"] as string,
      productName: row["Product Name"] as string,
      ingredients: row["Ingredients"] as string,
    };
  });
  const ingredientRegex = new RegExp(ingredient.toLowerCase());
  const hitProds = prodsArr.flatMap((prod) => {
    const hit = ingredientRegex.test(prod.ingredients.toLowerCase());
    if (hit) {
      const ingredientsArr = prod.ingredients.split(/(?<!1),/gim);
      const trimmedArr = ingredientsArr.map((ingredient: string) =>
        ingredient.trim()
      );
      const highlightedIngredients = trimmedArr.map((ingredient) => {
        const highlighted = ingredientRegex.test(ingredient.toLowerCase());
        return {
          name: ingredient,
          highlighted,
        };
      });
      return {
        productLine: prod.productLine,
        productName: prod.productName,
        ingredients: highlightedIngredients,
      };
    } else {
      return [];
    }
  });
  res.send(hitProds);
  return true;
});

if (process.env.NODE_ENV === "production") {
  app.use(express.static("client/build"));

  app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "client", "build", "index.html"));
  });
} else {
  app.get("/", (req: Request, res: Response) => {
    res.send("Hello from the Glow Labs API!");
  });
}

app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}...`);
});
